build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"


# =========================
# build wheel linux aarch64
# =========================

build_wheels_linux_aarch64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder-arm64
    architecture: arm64
    platform: linux
    cpu: 1
    memory: 4G
  matrix:
    - env:
        CIBW_BUILD: "cp39-manylinux_aarch64"
        # EXPECT_CPU_FEATURES: NEON NEON_FP16 NEON_VFPV4 ASIMD ASIMDHP ASIMDDP ASIMDFHM
    - env:
        CIBW_BUILD: "cp310-manylinux_aarch64"
    - env:
        CIBW_BUILD: "cp311-manylinux_aarch64"
    - env:
        CIBW_BUILD: "cp312-manylinux_aarch64"
  env:
    CIBW_ARCHS: "aarch64"
    # CIBW_BUILD: "*-manylinux_aarch64"
    CIBW_SKIP: "pp* cp36-* cp37-* cp38-*"
    CIBW_BUILD_VERBOSITY: "3"
    # CIBW_BEFORE_BUILD: "bash {project}/tools/wheels/cibw_before_build.sh {project}"
    MANYLINUX_AARCH64_IMAGE: "manylinux2014"
    ENVIRONMENT: >
      CFLAGS="-fno-strict-aliasing"
      LDFLAGS="-Wl,--strip-debug"
      RUNNER_OS="Linux"

  build_script: |
    apt update
    apt install -y python3-venv python-is-python3 gfortran libatlas-base-dev libgfortran5 eatmydata
    git fetch origin
    # bash ./tools/wheels/cibw_before_build.sh ${PWD}
    which python
    echo $CIRRUS_CHANGE_MESSAGE
  <<: *BUILD_AND_STORE_WHEELS


# =========================
# build wheels macosx arm64
# =========================

build_wheels_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
    cpu: 1
    memory: 4G
  matrix:
    - env:
        CIBW_BUILD: "cp39-macosx_arm64"
    - env:
        CIBW_BUILD: "cp310-macosx_arm64"
    - env:
        CIBW_BUILD: "cp311-macosx_arm64"
    - env:
        CIBW_BUILD: "cp312-macosx_arm64"
  env:
    PATH: /opt/homebrew/opt/python@3.10/bin:/usr/local/lib:/usr/local/include:$PATH
    # Specifying CIBW_ENVIRONMENT_MACOS overrides pyproject.toml, so include
    # all the settings from there, otherwise they're lost.
    # SDKROOT needs to be set for repackaged conda-forge gfortran compilers
    # supplied by isuruf.
    # Find out SDKROOT via `xcrun --sdk macosx --show-sdk-path`
    # MACOS linker doesn't support stripping symbols, hence we set: CFLAGS="-fno-strict-aliasing"
    CIBW_ENVIRONMENT_MACOS: >
      RUNNER_OS=macOS
      CFLAGS="-fno-strict-aliasing"
      SDKROOT=/Applications/Xcode-14.0.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
      LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    CIBW_ARCHS: "arm64"
    # CIBW_BUILD: "*-macosx_arm64"
    CIBW_SKIP: "pp* cp36-* cp37-* cp38-*"
    CIBW_BUILD_VERBOSITY: "3"
    CIBW_BEFORE_BUILD: "bash {project}/tools/wheels/cibw_before_build.sh {project}"
    CIBW_TEST_SKIP: "*_universal2:arm64"

  build_script:
    - brew install python@3.10
    - ln -s python3 /opt/homebrew/opt/python@3.10/bin/python
    - which python
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
  <<: *BUILD_AND_STORE_WHEELS


# =================
# upload all wheels
# =================

wheels_upload_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  # Artifacts don't seem to be persistent from task to task.
  # Rather than upload wheels at the end of each cibuildwheel run we do a
  # final upload here. This is because a run may be on different OS for
  # which bash, etc, may not be present.
  depends_on:
    - build_wheels_linux_aarch64
    - build_wheels_macosx_arm64
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux
    cpu: 1
    memory: 4G

  env:
    PYPI_PASSWORD: ENCRYPTED[485f574e94e67a6d00e46a2490863b7b67059cccaf723e09c1f56af3e8b806627d3391d0a501ef7135a52590a902f7b5]

  upload_script: |
    apt-get update
    apt-get install -y curl wget

    # The name of the zip file is derived from the `wheels_artifact` line.
    # If you change the artifact line to `myfile_artifact` then it would be
    # called myfile.zip
    curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/wheels.zip --output wheels.zip
    mkdir -p dist
    unzip -j wheels.zip -d dist

    source ./tools/wheels/upload_wheels.sh
    install_anaconda "linux_aarch64"
    upload_wheels_pypi


# =================
# test macosx arm64
# =================

test_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
    cpu: 1
    memory: 4G
  depends_on:
    - wheels_upload
  matrix:
    - env:
        PY_VER: "3.9"
    - env:
        PY_VER: "3.10"
    # - env:
    #     PY_VER: "3.11"
    # - env:
    #     PY_VER: "3.12"

  test_script:
    - brew install python@${PY_VER}
    - ln -s python3 /opt/homebrew/opt/python@${PY_VER}/bin/python
    - set -xe
    - which python3
    - uname -m
    - python3 -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - python3 -m pip install --upgrade pip
    - python3 -m pip install --upgrade special_functions
    - python3 -m pip install numpy
    - python3 -m pip install -r tests/requirements.txt
    - mv special_functions special_functions_do_dot_import
    - python3 -m pytest


# ==================
# test linux aarch64
# ==================

test_linux_aarch64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder-arm64
    architecture: arm64
    platform: linux
    cpu: 1
    memory: 4G
  depends_on:
    - wheels_upload

  test_script: |
    apt update
    apt install -y python3
    set -xe
    uname -m
    python3 -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    python3 -m pip install --upgrade pip
    python3 -m pip install --upgrade special_functions
    python3 -m pip install numpy
    python3 -m pip install -r tests/requirements.txt
    mv special_functions special_functions_do_dot_import
    python3 -m pytest
