build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"


# =========================
# build wheels macosx arm64
# =========================

build_wheels_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
    cpu: 1
    memory: 4G
  matrix:
    - env:
        CIBW_BUILD: "cp39-macosx_arm64"
    - env:
        CIBW_BUILD: "cp310-macosx_arm64"
    - env:
        CIBW_BUILD: "cp311-macosx_arm64"
    - env:
        CIBW_BUILD: "cp312-macosx_arm64"
  env:
    PATH: /opt/homebrew/opt/python@3.10/bin:/usr/local/lib:/usr/local/include:$PATH
    # Specifying CIBW_ENVIRONMENT_MACOS overrides pyproject.toml, so include
    # all the settings from there, otherwise they're lost.
    # SDKROOT needs to be set for repackaged conda-forge gfortran compilers
    # supplied by isuruf.
    # Find out SDKROOT via `xcrun --sdk macosx --show-sdk-path`
    # MACOS linker doesn't support stripping symbols, hence we set: CFLAGS="-fno-strict-aliasing"
    CIBW_ENVIRONMENT_MACOS: >
      RUNNER_OS=macOS
      CFLAGS="-fno-strict-aliasing"
      SDKROOT=/Applications/Xcode-14.0.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
      LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    CIBW_ARCHS: "arm64"
    # CIBW_BUILD: "*-macosx_arm64"
    CIBW_SKIP: "pp* cp36-* cp37-* cp38-*"
    CIBW_BUILD_VERBOSITY: "3"
    CIBW_BEFORE_BUILD: "bash {project}/tools/wheels/cibw_before_build.sh {project}"
    CIBW_TEST_SKIP: "*_universal2:arm64"

  build_script:
    - brew install python@3.10
    - ln -s python3 /opt/homebrew/opt/python@3.10/bin/python
    - which python
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
  <<: *BUILD_AND_STORE_WHEELS


# ===============================
# build upload conda macosx arm64
# ===============================

build_upload_conda_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
    cpu: 1
    memory: 4G
  depends_on:
    - build_wheels_macosx_arm64
  env:
    ANACONDA_API_TOKEN: ENCRYPTED[46301c55bb8947383f5ada690555715865045dc694dacfba2182fa482892e8ac2b1c846dc022e85ba74d8ddd8816bbca]

  build_script:
    # The name of the zip file is derived from the `wheels_artifact` line.
    # If you change the artifact line to `myfile_artifact` then it would be
    # called myfile.zip
    - curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/wheels.zip --output wheels.zip
    - mkdir -p dist
    - unzip -j wheels.zip -d dist
    - source ./tools/wheels/upload_wheels.sh
    - install_anaconda "macosx_arm64"
    - build_upload_anaconda "macosx_arm64"


# =================
# test macosx arm64
# =================

test_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
    cpu: 1
    memory: 4G
  depends_on:
    - build_upload_conda_macosx_arm64

  test_script:
    - source ./tools/wheels/upload_wheels.sh
    - install_anaconda "macosx_arm64"
    - set -xe
    - CONDA_BIN_DIR=$(dirname `which conda`)
    - PYTHON=${CONDA_BIN_DIR}/python
    - uname -m
    - ${PYTHON} -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - ${PYTHON} -m pip install --upgrade pip
    - ${PYTHON} -m pip install --upgrade special_functions
    - ${PYTHON} -m pip install numpy
    - ${PYTHON} -m pip install -r tests/requirements.txt
    - mv special_functions special_functions_do_dot_import
    - ${PYTHON} -m pytest
