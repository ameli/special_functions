# build_and_store_wheels: &BUILD_AND_STORE_WHEELS
#   install_cibuildwheel_script:
#     - python -m pip install cibuildwheel
#   cibuildwheel_script:
#     - cibuildwheel
#   wheels_artifacts:
#     path: "wheelhouse/*"

######################################################################
# Build linux_aarch64 natively
######################################################################

# linux_aarch64_task:
#   use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
#   # compute_engine_instance:
#   arm_container:
#     image_project: cirrus-images
#     image: family/docker-builder-arm64
#     architecture: arm64
#     platform: linux
#     cpu: 1
#     memory: 8G
#   matrix:
#     # build in a matrix because building and testing all four wheels in a
#     # single task takes longer than 60 mins (the default time limit for a
#     # cirrus-ci task).
#     - env:
#         CIRRUS_CLONE_SUBMODULES: true
#         CIBW_BUILD: cp39-*
#         EXPECT_CPU_FEATURES: NEON NEON_FP16 NEON_VFPV4 ASIMD ASIMDHP ASIMDDP ASIMDFHM
#     # - env:
#     #     CIRRUS_CLONE_SUBMODULES: true
#     #     CIBW_BUILD: cp310-*
#     # - env:
#     #     CIRRUS_CLONE_SUBMODULES: true
#     #     CIBW_BUILD: cp311-*
#     # - env:
#     #     CIRRUS_CLONE_SUBMODULES: true
#     #     CIBW_PRERELEASE_PYTHONS: True
#     #     CIBW_BUILD: cp312-*
#
#   build_script: |
#     apt update
#     apt install -y python3-venv python-is-python3 gfortran libatlas-base-dev libgfortran5 eatmydata
#     git fetch origin
#     bash ./tools/wheels/cibw_before_build.sh ${PWD}
#     which python
#     echo $CIRRUS_CHANGE_MESSAGE
#   <<: *BUILD_AND_STORE_WHEELS


######################################################################
# Build macosx_arm64 natively
######################################################################

build_wheels_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:14
    cpu: 1
    memory: 8G
  matrix:
    - env:
        CIRRUS_CLONE_SUBMODULES: true
        CIBW_BUILD: cp39-*
    # - env:
    #     CIRRUS_CLONE_SUBMODULES: true
    #     CIBW_BUILD: cp310-* cp311-*
    # - env:
    #     CIRRUS_CLONE_SUBMODULES: true
    #     CIBW_PRERELEASE_PYTHONS: True
    #     CIBW_BUILD: cp312-*
  env:
    PATH: /opt/homebrew/opt/python@3.10/bin:/usr/local/lib:/usr/local/include:$PATH
    # Specifying CIBW_ENVIRONMENT_MACOS overrides pyproject.toml, so include
    # all the settings from there, otherwise they're lost.
    # SDKROOT needs to be set for repackaged conda-forge gfortran compilers
    # supplied by isuruf.
    # Find out SDKROOT via `xcrun --sdk macosx --show-sdk-path`
    CIBW_ENVIRONMENT_MACOS: >
      RUNNER_OS=macOS
      SDKROOT=/Applications/Xcode-14.0.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
      LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    CIBW_ARCHS: "arm64"
    CIBW_BUILD: "*-macosx_arm64"
    CIBW_SKIP: "pp* cp36-* cp37-* cp38-*"
    CIBW_BUILD_VERBOSITY: "3"
    CIBW_BEFORE_BUILD: "bash {project}/tools/wheels/cibw_before_build.sh {project}"
    CIBW_TEST_SKIP: "*_universal2:arm64"
    CIBW_ENVIRONMENT: {CFLAGS="-fno-strict-aliasing", RUNNER_OS="macOS"}  # MACOS linker doesn't support stripping symbols

  build_script:
    - brew install python@3.10
    - ln -s python3 /opt/homebrew/opt/python@3.10/bin/python
    - which python
    # needed for submodules
    # - git submodule update --init # TEST
    # need to obtain all the tags so setup.py can determine FULLVERSION
    # - git fetch origin # TEST
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
    - python -m pip install cibuildwheel
    - cibuildwheel --output-dir wheelhouse

  # <<: *BUILD_AND_STORE_WHEELS


######################################################################
# Upload all wheels
######################################################################

wheels_upload_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  # Artifacts don't seem to be persistent from task to task.
  # Rather than upload wheels at the end of each cibuildwheel run we do a
  # final upload here. This is because a run may be on different OS for
  # which bash, etc, may not be present.
  depends_on:
    # - linux_aarch64
    - build_wheels_macosx_arm64
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux
    cpu: 1
    memory: 4G

  env:
    PYPI_PASSWORD: ENCRYPTED[485f574e94e67a6d00e46a2490863b7b67059cccaf723e09c1f56af3e8b806627d3391d0a501ef7135a52590a902f7b5]
    ANACONDA_TOKEN: ENCRYPTED[46301c55bb8947383f5ada690555715865045dc694dacfba2182fa482892e8ac2b1c846dc022e85ba74d8ddd8816bbca]

  upload_script: |
    apt-get update
    apt-get install -y curl wget
    # export IS_SCHEDULE_DISPATCH="false"
    # export IS_PUSH="false"

    # cron job
    # if [[ "$CIRRUS_CRON" == "nightly" ]]; then
    #   export IS_SCHEDULE_DISPATCH="true"
    # fi

    # a manual build was started
    # if [[ "$CIRRUS_BUILD_SOURCE" == "api" && "$CIRRUS_COMMIT_MESSAGE" == "API build for null" ]]; then
    #   export IS_SCHEDULE_DISPATCH="true"
    # fi

    # only upload wheels to staging if it's a tag beginning with 'v' and you're
    # on a maintenance branch
    # if [[ "$CIRRUS_TAG" == v* ]] && [[ $CIRRUS_TAG != *"dev0"* ]]; then
    #   export IS_PUSH="true"
    # fi

    IS_PUSH="true"
    if [[ $IS_PUSH == "true" ]]; then

        source ./tools/wheels/upload_wheels_pypi.sh
        
        # The name of the zip file is derived from the `wheels_artifact` line.
        # If you change the artifact line to `myfile_artifact` then it would be
        # called myfile.zip
        curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/wheels.zip --output wheels.zip
        mkdir -p dist
        unzip wheels.zip -d dist

        ls
        echo "----------- dist"
        ls dist
        echo "----------- wheelhouse"
        ls wheelhouse

        install_anaconda
        upload_wheels_pypi
        # build_upload_wheels_anaconda
    fi
