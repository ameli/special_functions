[build-system]
build-backend = "mesonpy"
requires = ["meson-python", "cython>=0.29.35"]

[project]
name = "special_functions"
license = {file = "LICENSE.txt"}
readme = "README.rst"
version = "0.2.15"
authors = [
    {name = "Siavash Ameli", email = "sameli@berkeley.edu" }
]
description = "Cython and Python API for special functions."
keywords = ['special-functions', 'bessel-function', 'gamma-function']
requires-python = ">=3.8"
classifiers = [
    'Programming Language :: Cython',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'License :: OSI Approved :: MIT License',
    'Operating System :: POSIX :: Linux',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: MacOS',
    'Natural Language :: English',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Developers',
    'Topic :: Software Development',
    'Topic :: Software Development :: Libraries :: Python Modules',
]

# [project.optional-dependencies]
# test = { file = ["./test/requirements.txt"] }
# docs = { file = ["./docs/requirements.txt"] }

[project.urls]
homepage = "https://ameli.github.io/special_functions/"
documentation = "https://ameli.github.io/special_functions/"
source = 'https://github.com/ameli/special_functions/'
download = 'https://github.com/ameli/special_functions/archive/main.zip'
tracker = "https://github.com/ameli/special_functions/issues"

# [tool.cibuildwheel]
# # Note: the below skip command doesn't do much currently, the platforms to
# # build wheels for in CI are controlled in `.github/workflows/wheels.yml` and
# # `tools/ci/cirrus_wheels.yml`.
# skip = "cp36-* cp37-* cp-38* pp37-* *-manylinux_i686 *_ppc64le *_s390x"
# build-verbosity = "3"
# before-build = "bash {project}/tools/wheels/cibw_before_build.sh {project}"
# # config-settings = "setup-args=-Duse-ilp64=true setup-args=-Dblas=openblas setup-args=-Dlapack=openblas setup-args=-Dblas-symbol-suffix=64_ setup-args=-Dallow-noblas=false" # TEST
# # meson has a hard dependency on ninja, and we need meson to build
# # c-extensions in tests. There is a ninja PyPI package used in
# # build_requirements.txt for macOS, windows, linux but it cannot be in
# # tests/requirements.txt since pyodide, which uses tests/requirements.txt, does
# # not have it.
# # before-test = "pip install ninja && pip install -r {project}/tests/requirements.txt" # TEST
# # test-command = "bash {project}/tools/wheels/cibw_test_command.sh {project}" # TEST

# [tool.cibuildwheel.linux]
# manylinux-x86_64-image = "manylinux2014"
# manylinux-aarch64-image = "manylinux2014"
# musllinux-x86_64-image = "musllinux_1_1"
# environment = {CFLAGS="-fno-strict-aliasing", LDFLAGS="-Wl,--strip-debug", RUNNER_OS="Linux"}

# [tool.cibuildwheel.macos]
# # For universal2 wheels, we will need to fuse them manually
# # instead of going through cibuildwheel
# # This is because cibuildwheel tries to make a fat wheel
# # https://github.com/multi-build/multibuild/blame/devel/README.rst#L541-L565
# # for more info
# archs = "x86_64 arm64"
# test-skip = "*_universal2:arm64"
# # MACOS linker doesn't support stripping symbols.
# environment = {CFLAGS="-fno-strict-aliasing", RUNNER_OS="macOS"}

# [tool.cibuildwheel.windows]
# environment = {PKG_CONFIG_PATH="C:/opt/64/lib/pkgconfig"}
# config-settings = "setup-args=--vsenv setup-args=-Duse-ilp64=true setup-args=-Dblas=openblas setup-args=-Dlapack=openblas"
# repair-wheel-command = "bash ./tools/wheels/repair_windows.sh {wheel} {dest_dir}"

# [[tool.cibuildwheel.overrides]]
# select = "*-win32"
# environment = {PKG_CONFIG_PATH="/opt/32/lib/pkgconfig"}
# config-settings = "setup-args=--vsenv setup-args=-Dallow-noblas=true"
# repair-wheel-command = ""
